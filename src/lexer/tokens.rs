#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Token {
    VOID,
    INT,
    SEMIC,
    LCURL,
    RCURL,
    LPAREN,
    RPAREN,
    RETURN,
    INTLITERAL,
    ARROW,
    ADD,
    SUB,
    MUL,
    DIV,
    AND,
    REF,
    OR,
    EQ,
    NE,
    LE,
    GE,
    LT,
    GT,
    ASSIGN,
    LOGNEG,
    IF,
    WHILE,
    FOR,
    ELSE,
    BREAK,
    CONTINUE,
    COMMA,
    MOD,
    CHAR,
    CHARLITERAL,
    LONG,
    LBRACE,
    RBRACE,
    STRINGLIT,
    COMPLEMENT,
    TYPEDEF,
    STRUCT,
    DOT,
    SIZEOF,
    IDENT,
    EOF,
    ERR,
}

impl Token {
    pub fn from(value: usize) -> Token {
        match value {
            0 => Token::VOID,
            1 => Token::INT,
            2 => Token::SEMIC,
            3 => Token::LCURL,
            4 => Token::RCURL,
            5 => Token::LPAREN,
            6 => Token::RPAREN,
            7 => Token::RETURN,
            8 => Token::INTLITERAL,
            9 => Token::ARROW,
            10 => Token::ADD,
            11 => Token::SUB,
            12 => Token::MUL,
            13 => Token::DIV,
            14 => Token::AND,
            15 => Token::REF,
            16 => Token::OR,
            17 => Token::EQ,
            18 => Token::NE,
            19 => Token::LE,
            20 => Token::GE,
            21 => Token::LT,
            22 => Token::GT,
            23 => Token::ASSIGN,
            24 => Token::LOGNEG,
            25 => Token::IF,
            26 => Token::WHILE,
            27 => Token::FOR,
            28 => Token::ELSE,
            29 => Token::BREAK,
            30 => Token::CONTINUE,
            31 => Token::COMMA,
            32 => Token::MOD,
            33 => Token::CHAR,
            34 => Token::CHARLITERAL,
            35 => Token::LONG,
            36 => Token::LBRACE,
            37 => Token::RBRACE,
            38 => Token::STRINGLIT,
            39 => Token::COMPLEMENT,
            40 => Token::TYPEDEF,
            41 => Token::STRUCT,
            42 => Token::DOT,
            43 => Token::SIZEOF,
            44 => Token::IDENT,
            45 => Token::EOF,
            _ => Token::ERR,
        }
    }
}

pub static TOKEN_PATTERN: &'static [&'static str] = &[
    "void",
    "int",
    ";",
    "\\{",
    "\\}",
    "\\(",
    "\\)",
    "return",
    "[0-9]+",
    "\\->",
    "\\+",
    "\\-",
    "\\*",
    "\\/",
    "\\&\\&",
    "\\&",
    "\\|\\|",
    "\\=\\=",
    "\\!\\=",
    "<\\=",
    ">\\=",
    "<",
    ">",
    "\\=",
    "\\!",
    "if",
    "while",
    "for",
    "else",
    "break",
    "continue",
    "\\,",
    "\\%",
    "char",
    "(\'.\')|(\'\\\\.\')",
    "long",
    "\\[",
    "\\]",
    "\"[^\"]*\"",
    "~",
    "typedef",
    "struct",
    "\\.",
    "sizeof",
    "\\w+",
];
