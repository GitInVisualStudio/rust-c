#[derive(Debug, Clone, Copy, PartialEq)]
pub enum TokenKind {
    VOID,
    INT,
    SEMIC,
    LCURL,
    RCURL,
    LPAREN,
    RPAREN,
    RETURN,
    INTLITERAL,
    ARROW,
    ADD,
    SUB,
    MUL,
    DIV,
    AND,
    REF,
    OR,
    EQ,
    NE,
    LE,
    GE,
    LT,
    GT,
    ASSIGN,
    LOGNEG,
    IF,
    WHILE,
    FOR,
    ELSE,
    BREAK,
    CONTINUE,
    COMMA,
    MOD,
    CHAR,
    CHARLITERAL,
    LONG,
    LBRACE,
    RBRACE,
    STRINGLIT,
    COMPLEMENT,
    TYPEDEF,
    STRUCT,
    DOT,
    SIZEOF,
    HASHTAG,
    DEFINE,
    INCLUDE,
    TYPEOF,
    ESCAPELINE,
    IDENT,
    EOF,
}

impl TokenKind {
    pub fn from(value: usize) -> TokenKind {
        match value {
            0 => TokenKind::VOID,
            1 => TokenKind::INT,
            2 => TokenKind::SEMIC,
            3 => TokenKind::LCURL,
            4 => TokenKind::RCURL,
            5 => TokenKind::LPAREN,
            6 => TokenKind::RPAREN,
            7 => TokenKind::RETURN,
            8 => TokenKind::INTLITERAL,
            9 => TokenKind::ARROW,
            10 => TokenKind::ADD,
            11 => TokenKind::SUB,
            12 => TokenKind::MUL,
            13 => TokenKind::DIV,
            14 => TokenKind::AND,
            15 => TokenKind::REF,
            16 => TokenKind::OR,
            17 => TokenKind::EQ,
            18 => TokenKind::NE,
            19 => TokenKind::LE,
            20 => TokenKind::GE,
            21 => TokenKind::LT,
            22 => TokenKind::GT,
            23 => TokenKind::ASSIGN,
            24 => TokenKind::LOGNEG,
            25 => TokenKind::IF,
            26 => TokenKind::WHILE,
            27 => TokenKind::FOR,
            28 => TokenKind::ELSE,
            29 => TokenKind::BREAK,
            30 => TokenKind::CONTINUE,
            31 => TokenKind::COMMA,
            32 => TokenKind::MOD,
            33 => TokenKind::CHAR,
            34 => TokenKind::CHARLITERAL,
            35 => TokenKind::LONG,
            36 => TokenKind::LBRACE,
            37 => TokenKind::RBRACE,
            38 => TokenKind::STRINGLIT,
            39 => TokenKind::COMPLEMENT,
            40 => TokenKind::TYPEDEF,
            41 => TokenKind::STRUCT,
            42 => TokenKind::DOT,
            43 => TokenKind::SIZEOF,
            44 => TokenKind::HASHTAG,
            45 => TokenKind::DEFINE,
            46 => TokenKind::INCLUDE,
            47 => TokenKind::TYPEOF,
            48 => TokenKind::ESCAPELINE,
            49 => TokenKind::IDENT,
            50 => TokenKind::EOF,
            _ => todo!(),
        }
    }
}

pub static TOKEN_PATTERN: &'static [&'static str] = &[
    "void",
    "int",
    ";",
    "\\{",
    "\\}",
    "\\(",
    "\\)",
    "return",
    "[0-9]+",
    "\\->",
    "\\+",
    "\\-",
    "\\*",
    "\\/",
    "\\&\\&",
    "\\&",
    "\\|\\|",
    "\\=\\=",
    "\\!\\=",
    "<\\=",
    ">\\=",
    "<",
    ">",
    "\\=",
    "\\!",
    "if",
    "while",
    "for",
    "else",
    "break",
    "continue",
    "\\,",
    "\\%",
    "char",
    "(\'.\')|(\'\\\\.\')",
    "long",
    "\\[",
    "\\]",
    "\"[^\"]*\"",
    "~",
    "typedef",
    "struct",
    "\\.",
    "sizeof",
    "#",
    "define",
    "include",
    "typeof",
    "\\\\\\\n",
    "\\w+",
];